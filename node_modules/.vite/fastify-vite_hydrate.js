import {
  __exportStar
} from "./chunk-VTHZOBFY.js";
import {
  __commonJS,
  __defProp,
  __markAsModule,
  __name,
  require_vue_runtime_esm_bundler
} from "./chunk-PHAHCSWL.js";
var __create = Object.create;
var __getProtoOf = Object.getPrototypeOf;
var __toModule = (module) => {
  return __exportStar(__markAsModule(__defProp(module != null ? __create(__getProtoOf(module)) : {}, "default", module && module.__esModule && "default" in module ? {get: () => module.default, enumerable: true} : {value: module, enumerable: true})), module);
};

// node_modules/fastify-vite/hydrate.js
var require_hydrate = __commonJS((exports, module) => {
  var {useSSRContext} = require_vue_runtime_esm_bundler();
  function hydrate(app, dataKey = "$data", globalDataKey = "$global") {
    const dataSymbol = Symbol.for(dataKey);
    app.config.globalProperties.$dataPath = () => `/-/data${document.location.pathname}`;
    app.config.globalProperties[dataKey] = window[dataSymbol];
    delete window[dataSymbol];
    const globalDataSymbol = Symbol.for(globalDataKey);
    app.config.globalProperties[globalDataKey] = window[globalDataSymbol];
    delete window[globalDataSymbol];
    const apiSymbol = Symbol.for("fastify-vite-api");
    app.config.globalProperties.$api = window[apiSymbol];
    delete window[apiSymbol];
    setupServerAPI(app.config.globalProperties);
  }
  __name(hydrate, "hydrate");
  module.exports = {hydrate};
  function setupServerAPI(globalProperties) {
    const {$api} = globalProperties;
    globalProperties.$api = import.meta.env.SSR ? useSSRContext().req.api.client : new Proxy($api, {get: getFetchWrapper});
  }
  __name(setupServerAPI, "setupServerAPI");
  function getFetchWrapper(methods, method) {
    if (method in methods) {
      if (Array.isArray(!methods[method]) && typeof methods[method] === "object") {
        return new Proxy(methods[method], {get: getFetchWrapper});
      }
      const hasParams = methods[method][1].match(/\/:(\w+)/);
      if (hasParams) {
        return async (params, options = {}) => {
          options.method = methods[method][0];
          const response = await fetch(applyParams(methods[method][1], params), options);
          const body = await response.text();
          return {
            body,
            json: tryJSONParse(body),
            status: response.status,
            headers: response.headers
          };
        };
      } else {
        return async (options = {}) => {
          options.method = methods[method][0];
          const response = await fetch(methods[method][1], options);
          const body = await response.text();
          return {
            body,
            json: tryJSONParse(body),
            status: response.status,
            headers: response.headers
          };
        };
      }
    }
  }
  __name(getFetchWrapper, "getFetchWrapper");
  function applyParams(template, params) {
    try {
      return template.replace(/:(\w+)/g, (_, m) => {
        if (params[m]) {
          return params[m];
        } else {
          throw null;
        }
      });
    } catch (err) {
      return null;
    }
  }
  __name(applyParams, "applyParams");
  function tryJSONParse(str) {
    try {
      return JSON.parse(str);
    } catch (_) {
      return void 0;
    }
  }
  __name(tryJSONParse, "tryJSONParse");
});

// dep:fastify-vite_hydrate
var require_fastify_vite_hydrate = __commonJS((exports) => {
  __markAsModule(exports);
  __exportStar(exports, __toModule(require_hydrate()));
});
export default require_fastify_vite_hydrate();
//# sourceMappingURL=fastify-vite_hydrate.js.map
